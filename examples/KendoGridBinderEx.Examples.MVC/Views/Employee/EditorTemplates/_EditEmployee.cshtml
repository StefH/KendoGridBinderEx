@using System.Web.Helpers
@model KendoGridBinderEx.Examples.MVC.Models.EmployeeVM

<table>
    <tr>
        <td style="width: 150px;">
            @Html.LabelFor(model => model.CompanyId)
        </td>
        <td style="width: 400px;">
            @Html.TextBoxFor(model => model.CompanyId, new { data_bind = "kendoDropDownList: { dataTextField: 'Name', dataValueField: 'Id', data: companies, value: companyId, optionLabel: 'Select ...' }" })
        </td>
        <td style="width: 300px;">
            @Html.ValidationMessageFor(model => model.CompanyId)
        </td>
    </tr>
    <tr>
        <td style="width: 150px;">
            @Html.LabelFor(model => model.CountryId)
        </td>
        <td style="width: 400px;">
            @Html.TextBoxFor(model => model.CountryId, new { data_bind = "kendoDropDownList: { dataTextField: 'Name', dataValueField: 'Id', data: countries, value: countryId, optionLabel: 'Select ...' }" })
        </td>
        <td style="width: 300px;">
            @Html.ValidationMessageFor(model => model.CountryId)
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(model => model.Number)
        </td>
        <td>
            @Html.TextBoxFor(model => model.Number, new { maxlength = 4, style = "width:30px;" })
        </td>
        <td>
            @Html.ValidationMessageFor(model => model.Number)
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(model => model.First)
        </td>
        <td>
            @Html.TextBoxFor(model => model.First)
        </td>
        <td>
            @Html.ValidationMessageFor(model => model.First)
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(model => model.LastName)
        </td>
        <td>
            @Html.TextBoxFor(model => model.LastName)
        </td>
        <td>
            @Html.ValidationMessageFor(model => model.LastName)
        </td>
    </tr>
    <tr data-bind="visible: isManager">
        <td>
            @Html.LabelFor(model => model.IsManager)
        </td>
        <td>
            <input disabled="disabled" type="checkbox" checked="checked" />
        </td>
        <td></td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(model => model.Email)
        </td>
        <td>
            @Html.TextBoxFor(model => model.Email)
        </td>
        <td>
            @Html.ValidationMessageFor(model => model.Email)
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(model => model.FunctionId)
        </td>
        <td>
            @Html.TextBoxFor(model => model.FunctionId, new { data_bind = "kendoDropDownList: { dataTextField: 'Name', dataValueField: 'Id', data: functions, value: functionId, optionLabel: 'Select ...' }" })
        </td>
        <td>
            @Html.ValidationMessageFor(model => model.FunctionId)
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(model => model.SubFunctionId)
        </td>
        <td>
            @Html.TextBoxFor(model => model.SubFunctionId, new { data_bind = "kendoDropDownList: { readonly: subfunctionIdEditable, dataTextField: 'Name', dataValueField: 'Id', data: subfunctions, value: subfunctionId, optionLabel: 'Select ...' }" })
        </td>
        <td>
            @Html.ValidationMessageFor(model => model.SubFunctionId)
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(model => model.HireDate)
        </td>
        <td>
            @Html.TextBoxFor(model => model.HireDate, new { data_bind = "kendoDatePicker: { value: hireDate, format: 'MM/dd/yyyy' }" })
        </td>
        <td>
            @Html.ValidationMessageFor(model => model.HireDate)
        </td>
    </tr>
</table>

<script type="text/javascript">
    $(document).ready(function () {
        var viewModelData = [@Html.Raw(Json.Encode(Model))][0];

        var ViewModel = function () {
            var self = this;

            this.Init = function () {
                this.GetCountries();
                this.GetCompanies();
                this.GetFunctions();
            };

            self.companies = ko.observableArray();
            self.countries = ko.observableArray();
            self.functions = ko.observableArray();
            self.subfunctions = ko.observableArray([{}]);
            self.companyId = ko.observable();
            self.countryId = ko.observable();
            self.functionId = ko.observable();
            self.subfunctionId = ko.observable(viewModelData.SubFunctionId);
            self.subfunctionIdEditable = ko.observable(false);
            self.lastname = ko.observable(viewModelData.LastName);
            self.hireDate = ko.observable(viewModelData.HireDate);

            self.isManager = ko.observable(viewModelData.IsManager);

            self.lastname.subscribe(function () {
                var params = {
                    last: self.lastname
                };

                $.getJSON('@Url.Action("IsManager", "Employee")', params, function (data) {
                    self.isManager(data);
                });
            });

            self.functionId.subscribe(function () {
                self.GetSubFunctions();
            });

            this.GetCompanies = function () {
                $.getJSON('@Url.Action("GetCompaniesAsJson", "Company")', function (data) {
                    self.companies(data);
                    self.companyId(viewModelData.CompanyId);
                }
                );
            };
            
            this.GetCountries = function () {
                $.getJSON('@Url.Action("GetCountriesAsJson", "Country")', function (data) {
                    self.countries(data);
                    self.countryId(viewModelData.CountryId);
                }
                );
            };

            this.GetFunctions = function () {
                $.getJSON('@Url.Action("GetFunctionsAsJson", "Function")', function (data) {
                    self.functions(data);
                    self.functionId(viewModelData.FunctionId);
                }
                );
            };

            this.GetSubFunctions = function () {
                var params = {
                    functionId: self.functionId
                };

                $.getJSON('@Url.Action("GetSubFunctionsByFunctionIdAsJson", "SubFunction")', params, function (data) {
                    self.subfunctionIdEditable(true);
                    self.subfunctions(data);
                    self.subfunctionId(viewModelData.SubFunctionId);
                }
                );
            };
        };

        var viewModel = new ViewModel();
        viewModel.Init();
        ko.applyBindings(viewModel);

        initializeRemotelyValidatingElementsWithAdditionalFields($("form"));
    });
</script>
